name: RAG System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Executar testes di√°rios √†s 2:00 UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  lint-and-format:
    name: üîç Lint & Format
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 ruff isort mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run Black (formatting)
      run: black --check --diff src tests scripts
      
    - name: Run isort (import sorting)
      run: isort --check-only --diff src tests scripts
      
    - name: Run Flake8 (linting)
      run: flake8 src tests scripts --max-line-length=100 --extend-ignore=E203,W503
      
    - name: Run Ruff (fast linting)
      run: ruff check src tests scripts
      
    - name: Run MyPy (type checking)
      run: mypy src --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # MyPy pode ter falsos positivos
      
    - name: Run Bandit (security linting)
      run: bandit -r src -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json

  security-tests:
    name: üîí Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run security tests
      run: |
        pytest tests/test_security.py -v --tb=short -m security
        
    - name: Check for hardcoded secrets
      run: |
        # Verificar se n√£o h√° credenciais hardcoded
        if grep -r -i -E "(password|api_key|secret|token)\s*=\s*['\"][^'\"]+['\"]" src/ --exclude-dir=__pycache__ --exclude="*.pyc"; then
          echo "‚ùå Credenciais hardcoded encontradas!"
          exit 1
        else
          echo "‚úÖ Nenhuma credencial hardcoded encontrada"
        fi
        
    - name: Validate environment variables usage
      run: |
        # Verificar se settings.py usa vari√°veis de ambiente
        if grep -q "Field(env=" src/settings.py; then
          echo "‚úÖ Vari√°veis de ambiente configuradas corretamente"
        else
          echo "‚ùå Vari√°veis de ambiente n√£o configuradas"
          exit 1
        fi

  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio pytest-timeout
        pip install -r requirements.txt
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --tb=short \
          --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=test-results-${{ matrix.python-version }}.xml \
          -m "unit or not slow" \
          --timeout=300
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results-${{ matrix.python-version }}.xml
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-asyncio
        pip install -r requirements.txt
        
    - name: Wait for Qdrant
      run: |
        for i in {1..30}; do
          if curl -f http://localhost:6333/health; then
            echo "Qdrant is ready"
            break
          fi
          echo "Waiting for Qdrant... ($i/30)"
          sleep 2
        done
        
    - name: Run integration tests
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
        OPENAI_API_KEY: "test-key"
        NEO4J_PASSWORD: "test-password"
      run: |
        pytest tests/test_rag_integration.py -v --tb=short \
          -m integration \
          --timeout=600
          
    - name: Test API endpoints
      env:
        OPENAI_API_KEY: "test-key"
        NEO4J_PASSWORD: "test-password"
      run: |
        pytest tests/test_rag_integration.py::TestAPIIntegration -v --tb=short

  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark pytest-mock
        pip install -r requirements.txt
        
    - name: Run performance tests
      env:
        OPENAI_API_KEY: "test-key"
        NEO4J_PASSWORD: "test-password"
      run: |
        pytest tests/ -v --tb=short \
          -m performance \
          --benchmark-only \
          --benchmark-json=benchmark-results.json
          
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: benchmark-results.json

  docker-build:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint-and-format, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t rag-system:test .
        
    - name: Test Docker image
      run: |
        # Verificar se a imagem foi criada corretamente
        docker run --rm rag-system:test python --version
        docker images rag-system:test

  dependency-security:
    name: üîê Dependency Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: pip install safety
      
    - name: Check for known vulnerabilities
      run: |
        # Verificar vulnerabilidades conhecidas nas depend√™ncias
        safety check --json --output safety-report.json || true
        
        # Verificar se h√° vulnerabilidades cr√≠ticas
        if safety check --short-report | grep -i "CRITICAL\|HIGH"; then
          echo "‚ùå Vulnerabilidades cr√≠ticas encontradas!"
          safety check --short-report
          exit 1
        else
          echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada"
        fi
        
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-security-report
        path: safety-report.json

  system-validation:
    name: ‚úÖ System Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security-tests, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run system validation
      run: |
        python scripts/validate_system.py
        
    - name: Upload validation report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: validation-report
        path: validation_report.json

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [integration-tests, docker-build, system-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "‚úÖ Staging deployment completed"
        # Aqui seria implementada a l√≥gica real de deploy

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [integration-tests, docker-build, system-validation, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üåü Deploying to production environment..."
        echo "‚úÖ Production deployment completed"
        # Aqui seria implementada a l√≥gica real de deploy

  notification:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "‚úÖ Production deployment successful!"
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "‚úÖ Staging deployment successful!"
        else
          echo "‚ÑπÔ∏è No deployments occurred"
        fi 