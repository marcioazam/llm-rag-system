"""Testes para o m√≥dulo template_renderer.

Testa a funcionalidade de preenchimento de placeholders em templates de prompt.
"""

import pytest
from src.template_renderer import render_template


class TestTemplateRenderer:
    """Testes para a fun√ß√£o render_template."""

    def test_render_template_basic_query_replacement(self):
        """Testa substitui√ß√£o b√°sica do placeholder {{query}}."""
        template = "Responda a seguinte pergunta: {{query}}"
        query = "O que √© Python?"
        
        result = render_template(template, query=query)
        
        expected = "Responda a seguinte pergunta: O que √© Python?"
        assert result == expected

    def test_render_template_basic_context_replacement(self):
        """Testa substitui√ß√£o b√°sica do placeholder {{context}}."""
        template = "Contexto: {{context}}\nPergunta: {{query}}"
        query = "Explique Python"
        context_snippets = ["Python √© uma linguagem de programa√ß√£o", "√â f√°cil de aprender"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Contexto: Python √© uma linguagem de programa√ß√£o\n\n√â f√°cil de aprender\nPergunta: Explique Python"
        assert result == expected

    def test_render_template_no_context_snippets(self):
        """Testa comportamento quando context_snippets √© None."""
        template = "Contexto: {{context}}\nPergunta: {{query}}"
        query = "Teste sem contexto"
        
        result = render_template(template, query=query, context_snippets=None)
        
        expected = "Contexto: \nPergunta: Teste sem contexto"
        assert result == expected

    def test_render_template_empty_context_snippets(self):
        """Testa comportamento com lista vazia de context_snippets."""
        template = "Contexto: {{context}}\nPergunta: {{query}}"
        query = "Teste com lista vazia"
        context_snippets = []
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Contexto: \nPergunta: Teste com lista vazia"
        assert result == expected

    def test_render_template_multiple_query_placeholders(self):
        """Testa template com m√∫ltiplos placeholders {{query}}."""
        template = "In√≠cio: {{query}} Meio: {{query}} Fim: {{query}}"
        query = "TESTE"
        
        result = render_template(template, query=query)
        
        expected = "In√≠cio: TESTE Meio: TESTE Fim: TESTE"
        assert result == expected

    def test_render_template_multiple_context_placeholders(self):
        """Testa template com m√∫ltiplos placeholders {{context}}."""
        template = "Primeiro: {{context}} Segundo: {{context}}"
        query = "teste"
        context_snippets = ["snippet1", "snippet2"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Primeiro: snippet1\n\nsnippet2 Segundo: snippet1\n\nsnippet2"
        assert result == expected

    def test_render_template_special_characters(self):
        """Testa com caracteres especiais na query e contexto."""
        template = "Query: {{query}} Context: {{context}}"
        query = "O que √© 2+2? E sobre $100 & 50%?"
        context_snippets = ["Pre√ßo: $100", "Desconto: 50%", "F√≥rmula: a + b = c"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Query: O que √© 2+2? E sobre $100 & 50%? Context: Pre√ßo: $100\n\nDesconto: 50%\n\nF√≥rmula: a + b = c"
        assert result == expected

    def test_render_template_unicode_characters(self):
        """Testa com caracteres unicode."""
        template = "Query: {{query}} Context: {{context}}"
        query = "ÊµãËØïÊü•ËØ¢ üöÄ √©mojis"
        context_snippets = ["Contexto en espa√±ol", "Contenu fran√ßais", "Êó•Êú¨Ë™û„Ç≥„É≥„ÉÜ„É≥„ÉÑ"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Query: ÊµãËØïÊü•ËØ¢ üöÄ √©mojis Context: Contexto en espa√±ol\n\nContenu fran√ßais\n\nÊó•Êú¨Ë™û„Ç≥„É≥„ÉÜ„É≥„ÉÑ"
        assert result == expected

    def test_render_template_newlines_in_content(self):
        """Testa com quebras de linha no conte√∫do."""
        template = "Query: {{query}} Context: {{context}}"
        query = "Linha 1\nLinha 2\nLinha 3"
        context_snippets = ["Primeira linha\nSegunda linha", "Outro\nMultilinha\nSnippet"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Query: Linha 1\nLinha 2\nLinha 3 Context: Primeira linha\nSegunda linha\n\nOutro\nMultilinha\nSnippet"
        assert result == expected

    def test_render_template_no_placeholders(self):
        """Testa template sem placeholders."""
        template = "Este √© um template est√°tico sem placeholders"
        query = "query qualquer"
        
        result = render_template(template, query=query)
        
        assert result == "Este √© um template est√°tico sem placeholders"

    def test_render_template_empty_template(self):
        """Testa com template vazio."""
        template = ""
        query = "query teste"
        
        result = render_template(template, query=query)
        
        assert result == ""

    def test_render_template_empty_query(self):
        """Testa com query vazia."""
        template = "Query: {{query}}"
        query = ""
        
        result = render_template(template, query=query)
        
        assert result == "Query: "

    def test_render_template_case_sensitive_placeholders(self):
        """Testa que placeholders s√£o case sensitive."""
        template = "{{Query}} {{QUERY}} {{context}} {{CONTEXT}}"
        query = "teste"
        context_snippets = ["snippet"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        # Apenas {{context}} deve ser substitu√≠do
        assert result == "{{Query}} {{QUERY}} snippet {{CONTEXT}}"

    def test_render_template_nested_braces(self):
        """Testa comportamento com chaves aninhadas."""
        template = "{{{query}}} {{{{query}}}}"
        query = "teste"
        
        result = render_template(template, query=query)
        
        assert result == "{teste} {{teste}}"

    def test_render_template_whitespace_preservation(self):
        """Testa que espa√ßos em branco s√£o preservados."""
        template = "  {{query}}  \n\n  {{context}}  "
        query = "  query com espa√ßos  "
        context_snippets = ["  contexto com espa√ßos  "]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        assert result == "    query com espa√ßos    \n\n    contexto com espa√ßos    "

    def test_render_template_empty_strings_in_context(self):
        """Testa com strings vazias nos snippets de contexto."""
        template = "Context: {{context}}"
        query = "teste"
        context_snippets = ["", "n√£o-vazio", "", "outro"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        assert result == "Context: \n\nn√£o-vazio\n\n\n\noutro"

    def test_render_template_realistic_prompt(self):
        """Testa com um template de prompt realista."""
        template = """Voc√™ √© um assistente √∫til. Responda √† pergunta do usu√°rio baseado no contexto fornecido.

Pergunta do Usu√°rio: {{query}}

Contexto Relevante:
{{context}}

Por favor, forne√ßa uma resposta abrangente baseada no contexto acima."""
        
        query = "O que √© aprendizado de m√°quina?"
        context_snippets = [
            "Aprendizado de m√°quina √© um subconjunto da intelig√™ncia artificial.",
            "Envolve treinar algoritmos em dados para fazer previs√µes.",
            "Tipos comuns incluem aprendizado supervisionado e n√£o supervisionado."
        ]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = """Voc√™ √© um assistente √∫til. Responda √† pergunta do usu√°rio baseado no contexto fornecido.

Pergunta do Usu√°rio: O que √© aprendizado de m√°quina?

Contexto Relevante:
Aprendizado de m√°quina √© um subconjunto da intelig√™ncia artificial.

Envolve treinar algoritmos em dados para fazer previs√µes.

Tipos comuns incluem aprendizado supervisionado e n√£o supervisionado.

Por favor, forne√ßa uma resposta abrangente baseada no contexto acima."""
        
        assert result == expected

    def test_render_template_very_long_content(self):
        """Testa com conte√∫do muito longo."""
        template = "Query: {{query}} Context: {{context}}"
        query = "a" * 1000
        context_snippets = ["b" * 500, "c" * 500]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected_context = "b" * 500 + "\n\n" + "c" * 500
        expected = f"Query: {'a' * 1000} Context: {expected_context}"
        assert result == expected

    def test_render_template_single_context_snippet(self):
        """Testa com apenas um snippet de contexto."""
        template = "Context: {{context}}"
        query = "teste"
        context_snippets = ["Apenas um snippet"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        assert result == "Context: Apenas um snippet"

    def test_render_template_single_context_snippet(self):
        """Testa comportamento com um √∫nico snippet de contexto."""
        template = "{{context}}\n\nPergunta: {{query}}"
        query = "Pergunta teste"
        context_snippets = ["√önico snippet de contexto"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "√önico snippet de contexto\n\nPergunta: Pergunta teste"
        assert result == expected

    def test_render_template_multiple_context_snippets(self):
        """Testa comportamento com m√∫ltiplos snippets de contexto."""
        template = "Contexto:\n{{context}}\n\nPergunta: {{query}}"
        query = "Como usar Python?"
        context_snippets = [
            "Python √© uma linguagem interpretada",
            "Tem sintaxe simples e clara",
            "√â amplamente usado em ci√™ncia de dados"
        ]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = (
            "Contexto:\n"
            "Python √© uma linguagem interpretada\n\n"
            "Tem sintaxe simples e clara\n\n"
            "√â amplamente usado em ci√™ncia de dados\n\n"
            "Pergunta: Como usar Python?"
        )
        assert result == expected

    def test_render_template_no_placeholders(self):
        """Testa template sem placeholders."""
        template = "Este √© um template sem placeholders."
        query = "Pergunta qualquer"
        
        result = render_template(template, query=query)
        
        assert result == template

    def test_render_template_only_query_placeholder(self):
        """Testa template com apenas placeholder {{query}}."""
        template = "Pergunta: {{query}}"
        query = "O que √© machine learning?"
        
        result = render_template(template, query=query)
        
        expected = "Pergunta: O que √© machine learning?"
        assert result == expected

    def test_render_template_only_context_placeholder(self):
        """Testa template com apenas placeholder {{context}}."""
        template = "Informa√ß√µes: {{context}}"
        query = "Qualquer pergunta"
        context_snippets = ["Informa√ß√£o 1", "Informa√ß√£o 2"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "Informa√ß√µes: Informa√ß√£o 1\n\nInforma√ß√£o 2"
        assert result == expected

    def test_render_template_multiple_query_placeholders(self):
        """Testa template com m√∫ltiplos placeholders {{query}}."""
        template = "Pergunta: {{query}}\nResponda: {{query}}"
        query = "Defina IA"
        
        result = render_template(template, query=query)
        
        expected = "Pergunta: Defina IA\nResponda: Defina IA"
        assert result == expected

    def test_render_template_multiple_context_placeholders(self):
        """Testa template com m√∫ltiplos placeholders {{context}}."""
        template = "Contexto 1: {{context}}\nContexto 2: {{context}}"
        query = "Teste"
        context_snippets = ["Snippet 1", "Snippet 2"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected_context = "Snippet 1\n\nSnippet 2"
        expected = f"Contexto 1: {expected_context}\nContexto 2: {expected_context}"
        assert result == expected

    def test_render_template_empty_query(self):
        """Testa comportamento com query vazia."""
        template = "Pergunta: {{query}}"
        query = ""
        
        result = render_template(template, query=query)
        
        expected = "Pergunta: "
        assert result == expected

    def test_render_template_empty_template(self):
        """Testa comportamento com template vazio."""
        template = ""
        query = "Pergunta teste"
        
        result = render_template(template, query=query)
        
        assert result == ""

    def test_render_template_whitespace_handling(self):
        """Testa tratamento de espa√ßos em branco."""
        template = "  {{query}}  \n  {{context}}  "
        query = "Pergunta com espa√ßos"
        context_snippets = ["Contexto com espa√ßos"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "  Pergunta com espa√ßos  \n  Contexto com espa√ßos  "
        assert result == expected

    def test_render_template_special_characters_in_query(self):
        """Testa query com caracteres especiais."""
        template = "Pergunta: {{query}}"
        query = "O que √© IA? Como funciona? Exemplos: ML, NLP, CV."
        
        result = render_template(template, query=query)
        
        expected = "Pergunta: O que √© IA? Como funciona? Exemplos: ML, NLP, CV."
        assert result == expected

    def test_render_template_special_characters_in_context(self):
        """Testa context_snippets com caracteres especiais."""
        template = "Contexto: {{context}}"
        query = "Teste"
        context_snippets = [
            "Snippet com s√≠mbolos: @#$%^&*()",
            "Snippet com acentos: √ß√£o, √£, √©, √º",
            "Snippet com quebras\nde linha"
        ]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = (
            "Contexto: Snippet com s√≠mbolos: @#$%^&*()\n\n"
            "Snippet com acentos: √ß√£o, √£, √©, √º\n\n"
            "Snippet com quebras\nde linha"
        )
        assert result == expected

    def test_render_template_unicode_characters(self):
        """Testa caracteres Unicode."""
        template = "ÈóÆÈ¢ò: {{query}}\n‰∏ä‰∏ãÊñá: {{context}}"
        query = "‰ªÄ‰πàÊòØPythonÔºü"
        context_snippets = ["PythonÊòØÁºñÁ®ãËØ≠Ë®Ä", "ÂæàÂÆπÊòìÂ≠¶‰π†"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        expected = "ÈóÆÈ¢ò: ‰ªÄ‰πàÊòØPythonÔºü\n‰∏ä‰∏ãÊñá: PythonÊòØÁºñÁ®ãËØ≠Ë®Ä\n\nÂæàÂÆπÊòìÂ≠¶‰π†"
        assert result == expected

    def test_render_template_long_content(self):
        """Testa comportamento com conte√∫do longo."""
        template = "{{context}}\n\nPergunta: {{query}}"
        query = "Pergunta sobre conte√∫do longo"
        
        # Cria snippets longos
        long_snippets = []
        for i in range(5):
            snippet = f"Este √© um snippet muito longo n√∫mero {i+1}. " * 20
            long_snippets.append(snippet.strip())
        
        result = render_template(template, query=query, context_snippets=long_snippets)
        
        # Verifica se todos os snippets est√£o presentes
        for i in range(5):
            assert f"snippet muito longo n√∫mero {i+1}" in result
        
        # Verifica se a query est√° presente
        assert "Pergunta sobre conte√∫do longo" in result

    def test_render_template_case_sensitivity(self):
        """Testa sensibilidade a mai√∫sculas/min√∫sculas dos placeholders."""
        template = "{{QUERY}} {{Query}} {{query}} {{CONTEXT}} {{Context}} {{context}}"
        query = "teste"
        context_snippets = ["contexto"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        # Apenas {{query}} e {{context}} devem ser substitu√≠dos (case-sensitive)
        expected = "{{QUERY}} {{Query}} teste {{CONTEXT}} {{Context}} contexto"
        assert result == expected

    def test_render_template_partial_placeholders(self):
        """Testa placeholders parciais ou malformados."""
        template = "{query} {{query} query}} {{query}} {{{query}}} {{context"
        query = "teste"
        context_snippets = ["contexto"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        # Apenas {{query}} completo deve ser substitu√≠do
        expected = "{query} {{query} query}} teste {teste} {{context"
        assert result == expected

    def test_render_template_nested_braces(self):
        """Testa comportamento com chaves aninhadas."""
        template = "{{{query}}} {{{{query}}}} {{{{{query}}}}}"
        query = "teste"
        
        result = render_template(template, query=query)
        
        # {{query}} dentro de chaves extras - replace simples substitui apenas {{query}}
        expected = "{teste} {{teste}} {{{teste}}}"
        assert result == expected

    def test_render_template_context_joining(self):
        """Testa se os snippets de contexto s√£o unidos corretamente."""
        template = "{{context}}"
        query = "teste"
        context_snippets = ["Primeiro", "Segundo", "Terceiro"]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        # Deve ser unido com \n\n
        expected = "Primeiro\n\nSegundo\n\nTerceiro"
        assert result == expected

    def test_render_template_keyword_only_parameters(self):
        """Testa que os par√¢metros s√£o keyword-only."""
        template = "{{query}} {{context}}"
        
        # Deve funcionar com par√¢metros nomeados
        result1 = render_template(template, query="teste", context_snippets=["contexto"])
        assert "teste contexto" == result1
        
        # Deve funcionar sem context_snippets
        result2 = render_template(template, query="teste")
        assert "teste " == result2
        
        # Testaria erro com par√¢metros posicionais, mas isso causaria erro de sintaxe
        # Por isso, apenas verificamos que a fun√ß√£o funciona corretamente com keyword args

    def test_render_template_complex_real_world_example(self):
        """Testa exemplo complexo do mundo real."""
        template = (
            "Voc√™ √© um assistente especializado em programa√ß√£o.\n\n"
            "Contexto relevante:\n{{context}}\n\n"
            "Pergunta do usu√°rio: {{query}}\n\n"
            "Forne√ßa uma resposta detalhada e precisa."
        )
        
        query = "Como implementar uma fun√ß√£o recursiva em Python?"
        context_snippets = [
            "Recurs√£o √© uma t√©cnica onde uma fun√ß√£o chama a si mesma.",
            "Em Python, √© importante definir um caso base para evitar recurs√£o infinita.",
            "Exemplo: def factorial(n): return 1 if n <= 1 else n * factorial(n-1)"
        ]
        
        result = render_template(template, query=query, context_snippets=context_snippets)
        
        # Verifica se todos os componentes est√£o presentes
        assert "Voc√™ √© um assistente especializado" in result
        assert "Como implementar uma fun√ß√£o recursiva" in result
        assert "Recurs√£o √© uma t√©cnica" in result
        assert "caso base para evitar" in result
        assert "def factorial(n)" in result
        assert "Forne√ßa uma resposta detalhada" in result
        
        # Verifica a estrutura geral
        assert result.count("\n\n") >= 4  # M√∫ltiplas se√ß√µes separadas